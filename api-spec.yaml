openapi: 3.1.0
info:
  title: Era Inventory API
  description: API for managing inventory, sites, vendors, and projects with organization isolation
  version: 1.0.0
  contact:
    name: Era Inventory Team
servers:
  - url: http://localhost:8080
    description: Local development server

security:
  - bearerAuth: []

paths:
  /health:
    get:
      summary: Health check
      description: Simple health check endpoint
      tags: [System]
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: "ok"

  /items:
    get:
      summary: List items
      description: Get paginated list of inventory items
      tags: [Items]
      parameters:
        - name: limit
          in: query
          description: Number of items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: q
          in: query
          description: Search query for name or asset tag
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field and direction (e.g., name:asc, created_at:desc)
          schema:
            type: string
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      summary: Create item
      description: Create a new inventory item
      tags: [Items]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '201':
          description: Item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Asset tag already exists

  /items/{id}:
    get:
      summary: Get item
      description: Get a specific inventory item by ID
      tags: [Items]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update item
      description: Update an existing inventory item
      tags: [Items]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '200':
          description: Item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Asset tag already exists

    delete:
      summary: Delete item
      description: Delete an inventory item
      tags: [Items]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Item deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /sites:
    get:
      summary: List sites
      description: Get paginated list of sites
      tags: [Sites]
      parameters:
        - name: limit
          in: query
          description: Number of sites to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of sites to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: q
          in: query
          description: Search query for site name
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field and direction
          schema:
            type: string
      responses:
        '200':
          description: List of sites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create site
      description: Create a new site
      tags: [Sites]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteInput'
      responses:
        '201':
          description: Site created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /sites/{id}:
    get:
      summary: Get site
      description: Get a specific site by ID
      tags: [Sites]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Site details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update site
      description: Update an existing site
      tags: [Sites]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteInput'
      responses:
        '200':
          description: Site updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete site
      description: Delete a site
      tags: [Sites]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Site deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /vendors:
    get:
      summary: List vendors
      description: Get paginated list of vendors
      tags: [Vendors]
      parameters:
        - name: limit
          in: query
          description: Number of vendors to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of vendors to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: q
          in: query
          description: Search query for vendor name
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field and direction
          schema:
            type: string
      responses:
        '200':
          description: List of vendors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create vendor
      description: Create a new vendor
      tags: [Vendors]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorInput'
      responses:
        '201':
          description: Vendor created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /vendors/{id}:
    get:
      summary: Get vendor
      description: Get a specific vendor by ID
      tags: [Vendors]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Vendor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendor'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update vendor
      description: Update an existing vendor
      tags: [Vendors]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorInput'
      responses:
        '200':
          description: Vendor updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete vendor
      description: Delete a vendor
      tags: [Vendors]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Vendor deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /projects:
    get:
      summary: List projects
      description: Get paginated list of projects
      tags: [Projects]
      parameters:
        - name: limit
          in: query
          description: Number of projects to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of projects to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: q
          in: query
          description: Search query for project code or name
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field and direction
          schema:
            type: string
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create project
      description: Create a new project
      tags: [Projects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Project code already exists

  /projects/{id}:
    get:
      summary: Get project
      description: Get a specific project by ID
      tags: [Projects]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update project
      description: Update an existing project
      tags: [Projects]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Project code already exists

    delete:
      summary: Delete project
      description: Delete a project
      tags: [Projects]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Project deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
        asset_tag:
          type: string
          description: Asset tag identifier
        name:
          type: string
          description: Item name
        manufacturer:
          type: string
          description: Manufacturer name
        model:
          type: string
          description: Model number
        device_type:
          type: string
          description: Type of device
        site:
          type: string
          description: Site location
        installed_at:
          type: string
          format: date-time
          nullable: true
        warranty_end:
          type: string
          format: date-time
          nullable: true
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - asset_tag
        - name

    ItemInput:
      type: object
      properties:
        asset_tag:
          type: string
          description: Asset tag identifier
        name:
          type: string
          description: Item name
        manufacturer:
          type: string
        model:
          type: string
        device_type:
          type: string
        site:
          type: string
        installed_at:
          type: string
          format: date-time
          nullable: true
        warranty_end:
          type: string
          format: date-time
          nullable: true
        notes:
          type: string
          nullable: true
      required:
        - asset_tag
        - name

    Site:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        location:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name

    SiteInput:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
      required:
        - name

    Vendor:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name

    VendorInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
      required:
        - name

    Project:
      type: object
      properties:
        id:
          type: integer
        code:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - code
        - name

    ProjectInput:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
      required:
        - code
        - name

    ListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Item'
              - $ref: '#/components/schemas/Site'
              - $ref: '#/components/schemas/Vendor'
              - $ref: '#/components/schemas/Project'
        page:
          type: object
          properties:
            limit:
              type: integer
            offset:
              type: integer
            total:
              type: integer
          required:
            - limit
            - offset
            - total
      required:
        - data
        - page

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: string

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: string

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: string

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: string

tags:
  - name: System
    description: System endpoints
  - name: Items
    description: Inventory item management
  - name: Sites
    description: Site management
  - name: Vendors
    description: Vendor management
  - name: Projects
    description: Project management
