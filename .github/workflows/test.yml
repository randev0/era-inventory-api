name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  TEST_DATABASE_URL: postgres://era:era@localhost:5432/era_test?sslmode=disable

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Clean Go module cache
        run: go clean -modcache

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run go vet
        run: go vet ./...

      - name: Run unit tests
        run: go test ./... -race -count=1 -timeout=60s

      - name: Run tests with coverage
        run: go test -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit
    # Only run on main branch or manual trigger
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Clean Go module cache
        run: go clean -modcache

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for Postgres..."
            sleep 1
          done

      - name: Create era user and database
        run: |
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -c "CREATE USER era WITH PASSWORD 'era';" || true
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -c "CREATE DATABASE era_test OWNER era;" || true
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE era_test TO era;" || true

      - name: Verify era user connection
        run: |
          until pg_isready -h localhost -p 5432 -U era -d era_test; do
            echo "Waiting for era user connection..."
            sleep 1
          done

      - name: Run migrations
        env:
          TEST_DATABASE_URL: postgres://era:era@localhost:5432/era_test?sslmode=disable
        run: go run ./cmd/testmigrate

      - name: Apply seeds
        run: |
          PGHOST=localhost PGPORT=5432 PGUSER=era PGPASSWORD=era PGDATABASE=era_test \
          psql -f db/seeds/001_minimal.sql

      - name: Run integration tests
        env:
          INTEGRATION: 1
          TEST_DATABASE_URL: postgres://era:era@localhost:5432/era_test?sslmode=disable
        run: go test ./internal/tests/integration_test.go -race -count=1 -timeout=90s -tags=integration

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: unit
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
        with:
          sarif_file: 'trivy-results.sarif'
