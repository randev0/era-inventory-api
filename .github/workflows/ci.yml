name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  pull-requests: read

env:
  GO_VERSION: '1.23.x' # set from go.mod

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: ${{ env.GO_VERSION }} }
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - uses: golangci/golangci-lint-action@v6
        with: { version: v1.60 }
      - run: golangci-lint run --timeout=5m

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: ${{ env.GO_VERSION }} }
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - name: Unit tests (race + coverage)
        run: go test ./... -race -coverprofile=coverage.out -covermode=atomic
      - uses: actions/upload-artifact@v4
        with: { name: coverage, path: coverage.out }

  integration-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: era
          POSTGRES_PASSWORD: era
          POSTGRES_DB: era_test
        options: >-
          --health-cmd="pg_isready -U era -d era_test -h localhost -p 5432"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    env:
      TEST_DATABASE_URL: postgres://era:era@localhost:5432/era_test?sslmode=disable
      INTEGRATION: "1"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: ${{ env.GO_VERSION }} }
      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      - name: CI Doctor
        run: ci/doctor.sh
      - name: Apply migrations
        run: go run ./cmd/testmigrate
      - name: Integration tests
        run: |
          # If your tests need tags, uncomment:
          # go test ./... -tags=integration -v
          go test ./... -v

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true
          vuln-type: os,library
      - name: Upload Trivy SARIF (skip on untrusted forks)
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: trivy-results.sarif }

  build:
    needs: [lint, unit-test, integration-test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: ${{ env.GO_VERSION }} }
      - run: go build -v ./...